--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
--

daml 1.2
module DA.RefApps.SupplyChain.Scenarios where

import DA.Date
import DA.Assert

import DA.RefApps.SupplyChain.Relationship
import DA.RefApps.SupplyChain.Types
import DA.RefApps.SupplyChain.Delivery
import DA.RefApps.SupplyChain.Inventory
import DA.RefApps.SupplyChain.Quote
import DA.RefApps.SupplyChain.QuoteRequest
import DA.RefApps.SupplyChain.Aggregate
import DA.RefApps.SupplyChain.Order

data SetupData = SetupData with
    buyerRoleCid: ContractId BuyerSellerRelationship
    product01: OrderedProduct
    product02: OrderedProduct
    inventoryW1P1Cid: ContractId InventoryItem
    inventoryW1P2Cid: ContractId InventoryItem
    inventoryW2P1Cid: ContractId InventoryItem
    inventoryW2P2Cid: ContractId InventoryItem


setup = scenario do
  buyer <- getParty "Buyer"
  seller <- getParty "Seller"
  supplier <- getParty "Supplier"
  warehouse1 <- getParty "Warehouse1"
  warehouse2 <- getParty "Warehouse2"
  transportComp1 <- getParty "TransportCompany1"
  transportComp2 <- getParty "TransportCompany2"

  -- Predefined data
  let
    product01 = OrderedProduct "banana" 100 (date 2019 Dec 1) (date 2019 Dec 10)
    product02 = OrderedProduct "orange" 10 (date 2019 Dec 10) (date 2019 Dec 14)
    buyerAddress = "1234, Vice City, Arkham street 13"

  -- Market setup
  buyerSellerRelInvitation <- submit buyer do
    create $ BuyerSellerRelationshipInvitation buyer buyerAddress seller
  buyerRole <- submit seller do
    exercise buyerSellerRelInvitation BuyerSellerRelationshipInvitation_Accept

  inventoryW1P1Cid <- submit warehouse1 do
    create InventoryItem
      with
        warehouse = warehouse1
        supplier = supplier
        productName = product01.productName
        quantity = 50
        unitPrice = 55.0
  inventoryW1P2Cid <- submit warehouse1 do
    create InventoryItem
      with
        warehouse = warehouse1
        supplier = supplier
        productName = product02.productName
        quantity = 100
        unitPrice = 60.0

  inventoryW2P1Cid <- submit warehouse2 do
    create InventoryItem
      with
        warehouse = warehouse2
        supplier = supplier
        productName = product01.productName
        quantity = 200
        unitPrice = 58.0
  inventoryW2P2Cid <- submit warehouse2 do
    create InventoryItem
      with
        warehouse = warehouse2
        supplier = supplier
        productName = product02.productName
        quantity = 100
        unitPrice = 65.0

  return SetupData with
    buyerRoleCid = buyerRole, ..

fullScenario = scenario do
  buyer <- getParty "Buyer"
  seller <- getParty "Seller"
  supplier <- getParty "Supplier"
  warehouse1 <- getParty "Warehouse1"
  warehouse2 <- getParty "Warehouse2"
  transportComp1 <- getParty "TransportCompany1"
  transportComp2 <- getParty "TransportCompany2"
  setupData <- setup

  -- Sending quote request
  [quoteReq1, _quoteReq2] <- submit buyer do
    qr1 <- exercise setupData.buyerRoleCid BuyerSellerRelationship_SendQuoteRequest with
                        products = [setupData.product01]
    qr2 <- exercise setupData.buyerRoleCid BuyerSellerRelationship_SendQuoteRequest with
                        products = [setupData.product02]
    return [qr1, qr2]

  -- Propagation of quote request towards supplier
  acceptedQr <- submit seller do
    accepted <- exercise quoteReq1 QuoteRequest_Accept
    exercise accepted QuoteRequestAccepted_SendToSupplier with
                        supplier = supplier

  -- Acceptance of invitation to supply the delivery, manual selection of product+warehouse+quantity for the quote
  (tranQuoteReqPending, [invReservationReq1, invReservationReq2],
   [transportQuoteRequestT1W1, transportQuoteRequestT1W2,
    transportQuoteRequestT2W1, transportQuoteRequestT2W2]) <-  submit supplier do
      supplyRequest <- exercise acceptedQr QuoteRequestSupplyInvitation_Accept
      -- Selection of warehouses and transport companies, sending transport requests, asking for transport quotes
      exercise supplyRequest $ SupplyRequest_StartPriceCollection [warehouse1, warehouse2] [transportComp1, transportComp2]

  -- Transport companies submit their transport quotes
  let
    transportQuoteItemT1_1 = TransportQuoteItem 25 25.0 (date 2019 Dec 4) (date 2019 Dec 5)
    transportQuoteItemT1_2 = TransportQuoteItem 50 50.0 (date 2019 Dec 6) (date 2019 Dec 8)
    transportQuoteItemT2_1 = TransportQuoteItem 50 100.0 (date 2019 Dec 3) (date 2019 Dec 5)
    transportQuoteItemT2_2 = TransportQuoteItem 100 200.0 (date 2019 Dec 7) (date 2019 Dec 8)
  transportQuoteT1W1 <- submit transportComp1 do
    exercise transportQuoteRequestT1W1 $ TransportQuoteRequest_Accept transportQuoteItemT1_1
  transportQuoteT1W2 <- submit transportComp1 do
    exercise transportQuoteRequestT1W2 $ TransportQuoteRequest_Accept transportQuoteItemT1_2
  transportQuoteT2W1 <- submit transportComp2 do
    exercise transportQuoteRequestT2W1 $ TransportQuoteRequest_Accept transportQuoteItemT2_1
  transportQuoteT2W2 <- submit transportComp2 do
    exercise transportQuoteRequestT2W2 $ TransportQuoteRequest_Accept transportQuoteItemT2_2

  -- warehouses accept reservation requests
  invReservationCid1 <- submit warehouse1 do
    exercise invReservationReq1 $ InventoryQuoteRequest_Accept setupData.inventoryW1P1Cid

  invReservationCid2 <- submit warehouse2 do
    exercise invReservationReq2 $ InventoryQuoteRequest_Accept setupData.inventoryW2P1Cid

  -- After a manual signal (that means end of transport quote request period), supplier's BOT collects
  -- all the available (tranport and inventory) quotes sent in by transport companies with the inventory items
  -- and the best is chosen
  aggregatedQuotePending <- submit supplier do
    trigger <- exercise tranQuoteReqPending TransportQuoteRequestPending_ChooseTransport
    exercise trigger $
      ChooseTransportAndWarehouseBotTrigger_Proceed
        [transportQuoteT1W1, transportQuoteT1W2, transportQuoteT2W1, transportQuoteT2W2]
        [invReservationCid1, invReservationCid2]
        [setupData.inventoryW1P1Cid, setupData.inventoryW1P2Cid, setupData.inventoryW2P1Cid, setupData.inventoryW2P2Cid]

  -- Supplier sends the quote to seller (with the corresponding transport capacity lock)
  aggregatedQuoteTrigger <- submit supplier do
    exercise aggregatedQuotePending $ AggregatedQuotePending_SendQuoteToSeller

  -- This triggers seller's BOT that creates an aggregated quote containing prices without the margin, yet
  -- This is for visibility purposes, in the next step, seller adds the margin (not visible for supplier)
  quote <- submit seller do
    aggregatedQuote <- exercise aggregatedQuoteTrigger AggregatedQuoteTrigger_Execute
    quote <- exercise aggregatedQuote $ AggregatedQuote_AddMargin 0.1
    return quote

  -- Buyer accepts the quote
  order <- submit buyer do
    exercise quote Quote_Accept

  -- Seller start the delivery process notifying all the participants of the process
  [_delI1, _delI2, deliveryInstruction1] <- submit seller do
    exercise order Order_StartDelivery

  passToDate $ date 2019 Dec 6

  -- Transport company asks the warehouse for pickup acknowledgement
  pickUpReq <- submit transportComp1 do
    exercise deliveryInstruction1 DeliveryInstruction_PickUp

  -- TODO: Check whether it is good to send the delivery acknowledgement request to the buyer from the warehouse (instead of the transport company)
  -- Warehouse acknowledges the pickup then asks for buyer's delivery acknowledgement
  delivery1 <- submit warehouse2 do
    exercise pickUpReq $ PickUpRequest_Accept

  passToDate $ date 2019 Dec 8

  -- Buyer ackowledges delivery and pays
  deliveryComplete <- submit buyer do
    exercise delivery1 Delivery_Acknowledge

  -- Transport company acknowledges delivery as well finishing it and releasing capacity
  deliveryPayment <- submit seller do
    (deliveryPayment, buyerSellerObligationCid) <- exercise deliveryComplete DeliveryComplete_Accept
    buyerSellerObligation <- fetch buyerSellerObligationCid
    buyerSellerObligation.price === 3245.0
    return deliveryPayment

  -- TODO: Ask whether it is OK to release transport capacity lock after payment
  submit supplier do
    (deliverySupplierPayment, sellerSupplierObligationCid) <- exercise deliveryPayment DeliveryPayment_Accept
    (supplierWarehouseObligationCid, supplierTransportObligationCid) <- exercise deliverySupplierPayment DeliverySupplierPayment_Pay
    sellerSupplierObligation <- fetch sellerSupplierObligationCid
    supplierWarehouseObligation <- fetch supplierWarehouseObligationCid
    supplierTransportObligation <- fetch supplierTransportObligationCid
    -- TODO: Insert real numbers
    sellerSupplierObligation.price === 2950.0
    supplierWarehouseObligation.price === 2900.0
    supplierTransportObligation.price === 50.0
